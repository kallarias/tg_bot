import random
import telebot
import time
import logging

from pony.orm import db_session
from telebot import types
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

from draw.draw_mem import PostCardMaker
from mastermind_engine import FourBulls
from models import UserTasks

try:
    import settings
except ImportError:
    exit('DO settings.py.default settings.py and set TOKEN')

log = logging.getLogger("bot")


def configure_logging():
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(logging.Formatter("%(levelname)s %(message)s"))
    stream_handler.setLevel(logging.INFO)
    log.addHandler(stream_handler)

    file_handler = logging.FileHandler("bot.log", encoding='utf-8')
    file_handler.setFormatter(logging.Formatter("%(asctime)s %(levelname)s %(message)s"))
    file_handler.setLevel(logging.DEBUG)
    log.addHandler(file_handler)
    log.setLevel(logging.DEBUG)


bot = telebot.TeleBot(settings.TOKEN)
flag = 0
bot_help = settings.HELP_INFO
user_dict = {}
random_task = settings.RANDOM_THINGS
tconv = lambda x: time.strftime("%H:%M:%S %Y-%m-%d", time.localtime(x))  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç—ã –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π –≤–∏–¥
configure_logging()
bot.set_my_commands(settings.BOT_MENU_CONFIG)
shag = 0


@db_session
def add_db(user_id, name, data, task):
    UserTasks(user_id=user_id,
              name=name,
              date=data,
              task=task)


class AddTasks:
    def __init__(self, name):
        self.name = name
        self.data = None
        self.task = None
        self.flag = 0
        self.user_id = 0
        self.game = None


def add_user(message, user_flag=0, game=False):
    chat_id = message.chat.id
    name = message.from_user.first_name
    user = AddTasks(name)
    user_dict[chat_id] = user
    user_id = message.from_user.id
    add_id = user_dict[chat_id]
    add_id.user_id = user_id
    add_id.flag = user_flag
    if game:
        add_id.game = FourBulls(user_id=message.from_user.id)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    log.info(f"–ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ start –æ—Ç {message.from_user.id}")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    b_help = types.KeyboardButton('üôèüèª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üôèüèª')
    b_add = types.KeyboardButton('‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úèÔ∏è')
    b_show = types.KeyboardButton('üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ üìù')
    b_random = types.KeyboardButton('üëÅ‚Äçüó® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ üëÅ‚Äçüó®')
    b_exit = types.KeyboardButton('ü´° –ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è ü´°')
    b_game = types.KeyboardButton('üéÆ –ü–æ–∏–≥—Ä–∞–µ–º? üéÆ')
    b_draw = types.KeyboardButton('üñº –¢–≤–æ—Ä–∏–º üñº')
    markup.add(b_add, b_show, b_random, b_game, b_draw, b_exit, b_help)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup=markup)


@bot.message_handler(commands=['help'])
def f_help(message):
    markup = types.InlineKeyboardMarkup()
    switch_button = types.InlineKeyboardButton(text='–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –±–æ—Ç–∞',
                                               switch_inline_query="–î—É–º–∞—é —Ç—ã –Ω–µ —Ä–∞–∑–æ—á–∞—Ä—É–µ—à—å—Å—è")
    markup.add(switch_button)
    bot.send_message(message.chat.id, bot_help, reply_markup=markup)


@bot.message_handler(commands=['add'])
def add(message):
    add_user(message=message, user_flag=1)
    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(message.chat.id,
                     f"Select {LSTEP[step]}",
                     reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(call):
    result, key, step = DetailedTelegramCalendar().process(call.data)
    if not result and key:
        bot.edit_message_text(f"Select {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        chat_id = call.message.chat.id
        user_info = user_dict[chat_id]
        data = str(result)
        if user_info.flag == 1:
            try:
                user_info.data = data
                msg = bot.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {result}\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ",
                                            chat_id,
                                            call.message.message_id)
                bot.register_next_step_handler(msg, process_sex_step)
            except Exception as e:
                bot.reply_to(call.message, e)
        elif user_info.flag == 2:
            try:
                text = ""
                task = db_catch(data=data, user_id=user_info.user_id)
                if len(task) > 0:
                    text = "–ü–ª–∞–Ω—ã –Ω–∞ –¥–∞—Ç—É: " + data.upper()
                    for p in task:
                        text = f'{text}\n‚ùóÔ∏è {p.task} '
                else:
                    text = data.upper()
                    text = "–ù–∞ –¥–∞—Ç—É " + text + "\n–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç!"
                bot.edit_message_text(text, chat_id, call.message.message_id)
            except Exception as e:
                bot.reply_to(call.message, e)
        user_info.flag = 0


@db_session
def db_catch(data, user_id):
    task = UserTasks.select_by_sql(
        "SELECT * FROM UserTasks p WHERE p.date = $data AND p.user_id = $user_id")
    return task


def process_sex_step(message):
    try:
        chat_id = message.chat.id
        task = message.text
        add_tasks = user_dict[chat_id]
        add_tasks.task = task
        add_db(user_id=message.from_user.id, name=add_tasks.name, data=add_tasks.data, task=add_tasks.task)
        bot.send_message(chat_id, '–î–æ–±—Ä—ã–π –¥–µ–Ω—å ' + add_tasks.name + '\n–ó–∞–¥–∞—á–∞ ' + str(
            add_tasks.task) + ' –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ ' + add_tasks.data)
        log.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        bot.reply_to(message, e)


@bot.message_handler(commands=['show'])
def show(message):
    add_user(message=message, user_flag=2)
    calendar, step = DetailedTelegramCalendar().build()
    bot.send_message(message.chat.id,
                     f"Select {LSTEP[step]}",
                     reply_markup=calendar)


@bot.message_handler(commands=['random'])
def random_add(message):
    task = random.choice(random_task)
    data1 = tconv(message.date)
    command = data1.split()
    data = command[1]
    add_db(user_id=message.from_user.id, name=message.from_user.first_name, data=data, task=task)
    bot.send_message(message.chat.id,
                     '–î–æ–±—Ä—ã–π –¥–µ–Ω—å ' + message.from_user.first_name + '\n–ó–∞–¥–∞—á–∞ ' + task + ' –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ ' + data)


@bot.message_handler(commands=['game'])
def game(message):
    add_user(message=message, game=True)
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        b_yes = types.KeyboardButton('‚úÖ –î–∞ ‚úÖ')
        b_no = types.KeyboardButton('üëΩ –Ø –ø–µ–ª—å–º–µ—à–µ–∫ üëΩ')
        markup.add(b_yes, b_no)
        msg = bot.reply_to(message, '''–ü—Ä–∞–≤–∏–ª–∞:\n
–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–¥—É–º—ã–≤–∞–µ—Ç —á–µ—Ç—ã—Ä–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏–∑ 0,1,2,...9.\n
–ò–≥—Ä–æ–∫ –¥–µ–ª–∞–µ—Ç —Ö–æ–¥—ã, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã –∏ –∏—Ö –ø–æ—Ä—è–¥–æ–∫.\n
–ö–∞–∂–¥—ã–π —Ö–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ü–∏—Ñ—Ä, 0 –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ.\n
–í –æ—Ç–≤–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö —Ü–∏—Ñ—Ä,
—Å—Ç–æ—è—â–∏—Ö –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö (—á–∏—Å–ª–æ –±—ã–∫–æ–≤) –∏ —á–∏—Å–ª–æ –æ—Ç–≥–∞–¥–∞–Ω–Ω—ã—Ö 
—Ü–∏—Ñ—Ä, —Å—Ç–æ—è—â–∏—Ö –Ω–µ –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö (—á–∏—Å–ª–æ –∫–æ—Ä–æ–≤). \n\n–ù–∞—á–∏–Ω–∞–µ–º?''', reply_markup=markup)
        bot.register_next_step_handler(msg, process_game)
    except Exception as exp:
        bot.reply_to(message, exp)


def process_game(message):
    if message.text == '‚úÖ –î–∞ ‚úÖ':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        b_lox = types.KeyboardButton('üåÄ –°–¥–∞—é—Å—å üåÄ')
        markup.add(b_lox)
        msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_game_proverka)
    else:
        sticker = open('images/AnimSticker.tgs', 'rb')
        bot.send_sticker(message.chat.id, sticker)
        send_welcome(message)


def process_game_proverka(message):
    chat_id = message.chat.id
    number = message.text
    if number == 'üåÄ –°–¥–∞—é—Å—å üåÄ':
        sticker = open('images/lox.webp', 'rb')
        bot.send_sticker(chat_id, sticker)
        game(message)
    else:
        global shag
        shag += 1
        chat_id = message.chat.id
        user_info = user_dict[chat_id]
        vivod = user_info.game.proverka_chisla(number=number)
        _my_number = user_info.game.return_number()
        log.info(f"–∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ {_my_number[0]}")
        if _my_number[0] == list(number):
            bot.send_message(chat_id, f'{vivod}\n\n–ú—É—É—É! –ü–æ–±–µ–¥–∞!\n –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ –∑–∞ {shag} —à–∞–≥–æ–≤!')
            shag = 0
            _my_number.clear()
            send_welcome(message)
        else:
            msg = bot.send_message(chat_id, f'{vivod}\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ')
            bot.register_next_step_handler(msg, process_game_proverka)


@bot.message_handler(commands=['exit'])
def bot_exit(message):
    sticker = open('images/sticker2.webp', 'rb')
    bot.send_sticker(message.chat.id, sticker)


@bot.message_handler(commands=['draw'])
def draw(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–∑—É')
    bot.register_next_step_handler(msg, draw_now)


def draw_now(message):
    chat_id = message.chat.id
    draw_mem = PostCardMaker(mem=message.text)
    mem_addr = f'mem_{message.from_user.first_name}_{message.date}.jpg'
    draw_mem.make(out_path=mem_addr)
    photo = open(f'C:\\Python\\Projects\\tg_bot\\draw\\pictures\\{mem_addr}', 'rb')
    bot.send_photo(chat_id, photo)
    send_welcome(message)


@bot.message_handler(commands=['anime'])
def anime(message):
    markup = types.InlineKeyboardMarkup()
    btn_my_site = types.InlineKeyboardButton(text='–°–µ–∫—Ä–µ—Ç–Ω—ã–π —É–≥–æ–ª–æ–∫', url='https://shikimori.one/Jskoo')
    markup.add(btn_my_site)
    bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –ø–æ—Å–º–æ—Ç—Ä–∏ –∏—Ö –≤—Å–µ!", reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    if message.text == "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚úèÔ∏è":
        add(message)
    elif message.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏ üìù":
        show(message)
    elif message.text == "üëÅ‚Äçüó® –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ üëÅ‚Äçüó®":
        random_add(message)
    elif message.text == "ü´° –ü–æ–ø—Ä–æ—â–∞—Ç—å—Å—è ü´°":
        bot_exit(message)
    elif message.text == "üéÆ –ü–æ–∏–≥—Ä–∞–µ–º? üéÆ":
        game(message)
    elif message.text == "üñº –¢–≤–æ—Ä–∏–º üñº":
        draw(message)
    elif message.text == "üôèüèª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üôèüèª":
        f_help(message)
    else:
        bot.reply_to(message, message.text)


bot.polling(none_stop=True)

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will happen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()

bot.infinity_polling()
